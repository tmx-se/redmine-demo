<?xml version="1.0" encoding="UTF-8"?>
<Symbols version="2.0">
    <TranslationUnitId>2589368089_12040_127308239</TranslationUnitId>
    <HasCoverageInfo>true</HasCoverageInfo>
    <File name="C:\Parasoft_Tutorial\workspace_tutorial_tantai\Sensor\sensor.c" id="1"/>
    <Function id="__getreent" name="ZK__getreentX" decorated_name="struct _reent * __getreent(void)" sorted_name="__getreent" stub_used="true" needed="true">
      <stub_declaration complete="true">
         <declaration_prefix>EXTERN_C_LINKAGE struct _reent * __attribute__((__cdecl__)) </declaration_prefix>
         <declaration_suffix>_Stub___getreent (void) </declaration_suffix>
         <orig_declaration>EXTERN_C_LINKAGE struct _reent * __attribute__((__cdecl__)) __getreent () </orig_declaration>
         <trigger_name>__getreent</trigger_name>
         <trigger_call>CPPTEST_ACTUAL_CALL_C(&quot;__getreent&quot;)-&gt;WithRefArg(&quot;__return&quot;, &amp;__return, tgr_ptr_type(tgr_void_type()))-&gt;WithRefArg(&quot;__callOrig&quot;, &amp;__callOrig, tgr_int_type())-&gt;End()</trigger_call>
         <post_trigger_call>CPPTEST_ACTUAL_AFTER_CALL_C(&quot;__getreent&quot;)-&gt;WithRefArg(&quot;__return&quot;, &amp;__return, tgr_ptr_type(tgr_void_type()))-&gt;End()</post_trigger_call>
         <orig_call>__getreent()</orig_call>
         <return_var_decl>struct _reent * __return</return_var_decl>
         <return_expression>0</return_expression>
         <system_decl_header>sys\reent.h</system_decl_header>
      </stub_declaration>
    </Function>
    <Function id="fflush" name="ZGfflushX" decorated_name="int fflush(FILE *)" sorted_name="fflush" stub_used="true" needed="true">
      <stub_declaration complete="true">
         <declaration_prefix>EXTERN_C_LINKAGE int __attribute__((__cdecl__)) </declaration_prefix>
         <declaration_suffix>_Stub_fflush (FILE * _MT_var22) </declaration_suffix>
         <orig_declaration>EXTERN_C_LINKAGE int __attribute__((__cdecl__)) fflush (FILE * _MT_var40) </orig_declaration>
         <trigger_name>fflush</trigger_name>
         <trigger_call>CPPTEST_ACTUAL_CALL_C(&quot;fflush&quot;)-&gt;WithRefArg(&quot;_MT_var22&quot;, &amp;_MT_var22, tgr_ptr_type(tgr_void_type()))-&gt;WithRefArg(&quot;__return&quot;, &amp;__return, tgr_int_type())-&gt;WithRefArg(&quot;__callOrig&quot;, &amp;__callOrig, tgr_int_type())-&gt;End()</trigger_call>
         <post_trigger_call>CPPTEST_ACTUAL_AFTER_CALL_C(&quot;fflush&quot;)-&gt;WithRefArg(&quot;_MT_var22&quot;, &amp;_MT_var22, tgr_ptr_type(tgr_void_type()))-&gt;WithRefArg(&quot;__return&quot;, &amp;__return, tgr_int_type())-&gt;End()</post_trigger_call>
         <orig_call>fflush(_MT_var22)</orig_call>
         <return_var_decl>int __return</return_var_decl>
         <return_expression>0</return_expression>
         <system_decl_header>stdio.h</system_decl_header>
      </stub_declaration>
    </Function>
    <Function id="printf" name="ZGprintfX" decorated_name="int printf(const char *, ...)" sorted_name="printf" stub_used="true" needed="true">
      <stub_declaration complete="true">
         <declaration_prefix>EXTERN_C_LINKAGE int __attribute__((__cdecl__)) </declaration_prefix>
         <declaration_suffix>_Stub_printf (const char * _MT_var18, ...) </declaration_suffix>
         <orig_declaration>EXTERN_C_LINKAGE int __attribute__((__cdecl__)) printf (const char * _MT_var41, ...) </orig_declaration>
         <trigger_name>printf</trigger_name>
         <trigger_call>CPPTEST_ACTUAL_CALL_C(&quot;printf&quot;)-&gt;WithRefArg(&quot;_MT_var18&quot;, &amp;_MT_var18, tgr_ptr_type(tgr_char_type()))-&gt;WithRefArg(&quot;__return&quot;, &amp;__return, tgr_int_type())-&gt;End()</trigger_call>
         <post_trigger_call>CPPTEST_ACTUAL_AFTER_CALL_C(&quot;printf&quot;)-&gt;WithRefArg(&quot;_MT_var18&quot;, &amp;_MT_var18, tgr_ptr_type(tgr_char_type()))-&gt;WithRefArg(&quot;__return&quot;, &amp;__return, tgr_int_type())-&gt;End()</post_trigger_call>
         <return_var_decl>int __return</return_var_decl>
         <return_expression>0</return_expression>
      </stub_declaration>
    </Function>
    <Function id="free" name="ZEfreeX" decorated_name="void free(void *)" sorted_name="free" stub_used="true" needed="true">
      <stub_declaration complete="true">
         <declaration_prefix>EXTERN_C_LINKAGE void __attribute__((__cdecl__)) </declaration_prefix>
         <declaration_suffix>_Stub_free (void * _MT_var14) </declaration_suffix>
         <orig_declaration>EXTERN_C_LINKAGE void __attribute__((__cdecl__)) free (void * _MT_var42) </orig_declaration>
         <trigger_name>free</trigger_name>
         <trigger_call>CPPTEST_ACTUAL_CALL_C(&quot;free&quot;)-&gt;WithRefArg(&quot;_MT_var14&quot;, &amp;_MT_var14, tgr_ptr_type(tgr_void_type()))-&gt;WithRefArg(&quot;__callOrig&quot;, &amp;__callOrig, tgr_int_type())-&gt;End()</trigger_call>
         <post_trigger_call>CPPTEST_ACTUAL_AFTER_CALL_C(&quot;free&quot;)-&gt;WithRefArg(&quot;_MT_var14&quot;, &amp;_MT_var14, tgr_ptr_type(tgr_void_type()))-&gt;End()</post_trigger_call>
         <orig_call>free(_MT_var14)</orig_call>
      </stub_declaration>
    </Function>
    <Function id="malloc" name="ZGmallocX" decorated_name="void * malloc(size_t)" sorted_name="malloc" stub_used="true" needed="true">
      <stub_declaration complete="true">
         <declaration_prefix>EXTERN_C_LINKAGE void * __attribute__((__cdecl__)) </declaration_prefix>
         <declaration_suffix>_Stub_malloc (size_t __size) </declaration_suffix>
         <orig_declaration>EXTERN_C_LINKAGE void * __attribute__((__cdecl__)) malloc (size_t __size) </orig_declaration>
         <trigger_name>malloc</trigger_name>
         <trigger_call>CPPTEST_ACTUAL_CALL_C(&quot;malloc&quot;)-&gt;WithRefArg(&quot;__size&quot;, &amp;__size, tgr_uint_type())-&gt;WithRefArg(&quot;__return&quot;, &amp;__return, tgr_ptr_type(tgr_void_type()))-&gt;WithRefArg(&quot;__callOrig&quot;, &amp;__callOrig, tgr_int_type())-&gt;End()</trigger_call>
         <post_trigger_call>CPPTEST_ACTUAL_AFTER_CALL_C(&quot;malloc&quot;)-&gt;WithRefArg(&quot;__size&quot;, &amp;__size, tgr_uint_type())-&gt;WithRefArg(&quot;__return&quot;, &amp;__return, tgr_ptr_type(tgr_void_type()))-&gt;End()</post_trigger_call>
         <orig_call>malloc(__size)</orig_call>
         <return_var_decl>void * __return</return_var_decl>
         <return_expression>0</return_expression>
         <system_decl_header>stdlib.h</system_decl_header>
      </stub_declaration>
    </Function>
    <Function id="strcpy" name="ZGstrcpyX" decorated_name="char * strcpy(char *, const char *)" sorted_name="strcpy" stub_used="true" needed="true">
      <stub_declaration complete="true">
         <declaration_prefix>EXTERN_C_LINKAGE char * __attribute__((__cdecl__)) </declaration_prefix>
         <declaration_suffix>_Stub_strcpy (char * _MT_var8, const char * _MT_var9) </declaration_suffix>
         <orig_declaration>EXTERN_C_LINKAGE char * __attribute__((__cdecl__)) strcpy (char * _MT_var44, const char * _MT_var45) </orig_declaration>
         <trigger_name>strcpy</trigger_name>
         <trigger_call>CPPTEST_ACTUAL_CALL_C(&quot;strcpy&quot;)-&gt;WithRefArg(&quot;_MT_var8&quot;, &amp;_MT_var8, tgr_ptr_type(tgr_char_type()))-&gt;WithRefArg(&quot;_MT_var9&quot;, &amp;_MT_var9, tgr_ptr_type(tgr_char_type()))-&gt;WithRefArg(&quot;__return&quot;, &amp;__return, tgr_ptr_type(tgr_char_type()))-&gt;WithRefArg(&quot;__callOrig&quot;, &amp;__callOrig, tgr_int_type())-&gt;End()</trigger_call>
         <post_trigger_call>CPPTEST_ACTUAL_AFTER_CALL_C(&quot;strcpy&quot;)-&gt;WithRefArg(&quot;_MT_var8&quot;, &amp;_MT_var8, tgr_ptr_type(tgr_char_type()))-&gt;WithRefArg(&quot;_MT_var9&quot;, &amp;_MT_var9, tgr_ptr_type(tgr_char_type()))-&gt;WithRefArg(&quot;__return&quot;, &amp;__return, tgr_ptr_type(tgr_char_type()))-&gt;End()</post_trigger_call>
         <orig_call>strcpy(_MT_var8, _MT_var9)</orig_call>
         <return_var_decl>char * __return</return_var_decl>
         <return_expression>_MT_var8</return_expression>
      </stub_declaration>
    </Function>
    <Function id="readSensor" name="ZKreadSensorX" decorated_name="int readSensor(int *)" sorted_name="readSensor" stub_used="true">
      <stub_declaration complete="true">
         <declaration_prefix>EXTERN_C_LINKAGE int </declaration_prefix>
         <declaration_suffix>_Stub_readSensor (int * value) </declaration_suffix>
         <orig_declaration>EXTERN_C_LINKAGE int readSensor (int * value) </orig_declaration>
         <trigger_name>readSensor</trigger_name>
         <trigger_call>CPPTEST_ACTUAL_CALL_C(&quot;readSensor&quot;)-&gt;WithRefArg(&quot;value&quot;, &amp;value, tgr_ptr_type(tgr_int_type()))-&gt;WithRefArg(&quot;__return&quot;, &amp;__return, tgr_int_type())-&gt;WithRefArg(&quot;__callOrig&quot;, &amp;__callOrig, tgr_int_type())-&gt;End()</trigger_call>
         <post_trigger_call>CPPTEST_ACTUAL_AFTER_CALL_C(&quot;readSensor&quot;)-&gt;WithRefArg(&quot;value&quot;, &amp;value, tgr_ptr_type(tgr_int_type()))-&gt;WithRefArg(&quot;__return&quot;, &amp;__return, tgr_int_type())-&gt;End()</post_trigger_call>
         <orig_call>readSensor(value)</orig_call>
         <return_var_decl>int __return</return_var_decl>
         <return_expression>0</return_expression>
      </stub_declaration>
      <definition type="orig" source="code" file_id="1" line="11" col="5"/>
    </Function>
    <Function id="initialize" name="ZKinitializeX" decorated_name="void initialize(void)" sorted_name="initialize" stub_used="true">
      <stub_declaration complete="true">
         <declaration_prefix>EXTERN_C_LINKAGE void </declaration_prefix>
         <declaration_suffix>_Stub_initialize (void) </declaration_suffix>
         <orig_declaration>EXTERN_C_LINKAGE void initialize () </orig_declaration>
         <trigger_name>initialize</trigger_name>
         <trigger_call>CPPTEST_ACTUAL_CALL_C(&quot;initialize&quot;)-&gt;WithRefArg(&quot;__callOrig&quot;, &amp;__callOrig, tgr_int_type())-&gt;End()</trigger_call>
         <post_trigger_call>CPPTEST_ACTUAL_AFTER_CALL_C(&quot;initialize&quot;)-&gt;End()</post_trigger_call>
         <orig_call>initialize()</orig_call>
      </stub_declaration>
      <definition type="orig" source="code" file_id="1" line="25" col="6"/>
    </Function>
    <Function id="finalize" name="ZIfinalizeX" decorated_name="void finalize(void)" sorted_name="finalize" stub_used="true">
      <stub_declaration complete="true">
         <declaration_prefix>EXTERN_C_LINKAGE void </declaration_prefix>
         <declaration_suffix>_Stub_finalize (void) </declaration_suffix>
         <orig_declaration>EXTERN_C_LINKAGE void finalize () </orig_declaration>
         <trigger_name>finalize</trigger_name>
         <trigger_call>CPPTEST_ACTUAL_CALL_C(&quot;finalize&quot;)-&gt;WithRefArg(&quot;__callOrig&quot;, &amp;__callOrig, tgr_int_type())-&gt;End()</trigger_call>
         <post_trigger_call>CPPTEST_ACTUAL_AFTER_CALL_C(&quot;finalize&quot;)-&gt;End()</post_trigger_call>
         <orig_call>finalize()</orig_call>
      </stub_declaration>
      <definition type="orig" source="code" file_id="1" line="38" col="6"/>
    </Function>
    <Function id="printMessage" name="ZMprintMessageX" decorated_name="void printMessage(int, int)" sorted_name="printMessage" stub_used="true">
      <stub_declaration complete="true">
         <declaration_prefix>EXTERN_C_LINKAGE void </declaration_prefix>
         <declaration_suffix>_Stub_printMessage (int msgIndex, int value) </declaration_suffix>
         <orig_declaration>EXTERN_C_LINKAGE void printMessage (int msgIndex, int value) </orig_declaration>
         <trigger_name>printMessage</trigger_name>
         <trigger_call>CPPTEST_ACTUAL_CALL_C(&quot;printMessage&quot;)-&gt;WithRefArg(&quot;msgIndex&quot;, &amp;msgIndex, tgr_int_type())-&gt;WithRefArg(&quot;value&quot;, &amp;value, tgr_int_type())-&gt;WithRefArg(&quot;__callOrig&quot;, &amp;__callOrig, tgr_int_type())-&gt;End()</trigger_call>
         <post_trigger_call>CPPTEST_ACTUAL_AFTER_CALL_C(&quot;printMessage&quot;)-&gt;WithRefArg(&quot;msgIndex&quot;, &amp;msgIndex, tgr_int_type())-&gt;WithRefArg(&quot;value&quot;, &amp;value, tgr_int_type())-&gt;End()</post_trigger_call>
         <orig_call>printMessage(msgIndex, value)</orig_call>
      </stub_declaration>
      <definition type="orig" source="code" file_id="1" line="48" col="6"/>
    </Function>
    <Function id="reportSensorFailure" name="ZbDreportSensorFailureX" decorated_name="void reportSensorFailure(void)" sorted_name="reportSensorFailure" stub_used="true">
      <stub_declaration complete="true">
         <declaration_prefix>EXTERN_C_LINKAGE void </declaration_prefix>
         <declaration_suffix>_Stub_reportSensorFailure (void) </declaration_suffix>
         <orig_declaration>EXTERN_C_LINKAGE void reportSensorFailure () </orig_declaration>
         <trigger_name>reportSensorFailure</trigger_name>
         <trigger_call>CPPTEST_ACTUAL_CALL_C(&quot;reportSensorFailure&quot;)-&gt;WithRefArg(&quot;__callOrig&quot;, &amp;__callOrig, tgr_int_type())-&gt;End()</trigger_call>
         <post_trigger_call>CPPTEST_ACTUAL_AFTER_CALL_C(&quot;reportSensorFailure&quot;)-&gt;End()</post_trigger_call>
         <orig_call>reportSensorFailure()</orig_call>
      </stub_declaration>
      <definition type="orig" source="code" file_id="1" line="55" col="6"/>
    </Function>
    <Function id="handleSensorValue" name="ZbBhandleSensorValueX" decorated_name="void handleSensorValue(int)" sorted_name="handleSensorValue" stub_used="true">
      <stub_declaration complete="true">
         <declaration_prefix>EXTERN_C_LINKAGE void </declaration_prefix>
         <declaration_suffix>_Stub_handleSensorValue (int value) </declaration_suffix>
         <orig_declaration>EXTERN_C_LINKAGE void handleSensorValue (int value) </orig_declaration>
         <trigger_name>handleSensorValue</trigger_name>
         <trigger_call>CPPTEST_ACTUAL_CALL_C(&quot;handleSensorValue&quot;)-&gt;WithRefArg(&quot;value&quot;, &amp;value, tgr_int_type())-&gt;WithRefArg(&quot;__callOrig&quot;, &amp;__callOrig, tgr_int_type())-&gt;End()</trigger_call>
         <post_trigger_call>CPPTEST_ACTUAL_AFTER_CALL_C(&quot;handleSensorValue&quot;)-&gt;WithRefArg(&quot;value&quot;, &amp;value, tgr_int_type())-&gt;End()</post_trigger_call>
         <orig_call>handleSensorValue(value)</orig_call>
      </stub_declaration>
      <definition type="orig" source="code" file_id="1" line="61" col="6"/>
    </Function>
    <Function id="mainLoop" name="ZImainLoopX" decorated_name="void mainLoop(void)" sorted_name="mainLoop" stub_used="true">
      <stub_declaration complete="true">
         <declaration_prefix>EXTERN_C_LINKAGE void </declaration_prefix>
         <declaration_suffix>_Stub_mainLoop (void) </declaration_suffix>
         <orig_declaration>EXTERN_C_LINKAGE void mainLoop () </orig_declaration>
         <trigger_name>mainLoop</trigger_name>
         <trigger_call>CPPTEST_ACTUAL_CALL_C(&quot;mainLoop&quot;)-&gt;WithRefArg(&quot;__callOrig&quot;, &amp;__callOrig, tgr_int_type())-&gt;End()</trigger_call>
         <post_trigger_call>CPPTEST_ACTUAL_AFTER_CALL_C(&quot;mainLoop&quot;)-&gt;End()</post_trigger_call>
         <orig_call>mainLoop()</orig_call>
      </stub_declaration>
      <definition type="orig" source="code" file_id="1" line="73" col="6"/>
    </Function>
    <Function id="main" name="ZEmainX" decorated_name="int main(void)" sorted_name="main">
      <definition type="orig" source="code" file_id="1" line="90" col="5"/>
    </Function>
</Symbols>

