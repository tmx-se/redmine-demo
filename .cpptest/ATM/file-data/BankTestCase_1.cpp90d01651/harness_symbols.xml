<?xml version="1.0" encoding="UTF-8"?>
<Symbols version="2.0">
    <TranslationUnitId>4227230740_1164_157209600</TranslationUnitId>
    <HasCoverageInfo>true</HasCoverageInfo>
    <File name="C:\Parasoft_Tutorial\workspace_tutorial_tantai\ATM\CppUnit\BankTestCase_1.cpp" id="1"/>
    <Function id="_ZN4BankC9Ev" name="EBankZ0FXvZ" decorated_name="Bank::Bank(void)" sorted_name="Bank::Bank" needed="true">
      <stub_declaration complete="true">
         <declaration_prefix> ::Bank::Bank (::</declaration_prefix>
         <declaration_suffix>_Dummy __CPTR_stub_ctor_param) </declaration_suffix>
         <ctor_initializer>: myCurrentAccountNumber(0)</ctor_initializer>
         <trigger_name>Bank::Bank</trigger_name>
         <trigger_call>CPPTEST_ACTUAL_CALL(&quot;Bank::Bank&quot;)-&gt;WithPtrArg(&quot;this&quot;, this, tgr_void_type())-&gt;End()</trigger_call>
         <post_trigger_call>CPPTEST_ACTUAL_AFTER_CALL(&quot;Bank::Bank&quot;)-&gt;WithPtrArg(&quot;this&quot;, this, tgr_void_type())-&gt;End()</post_trigger_call>
         <user_decl_header>Bank.hxx</user_decl_header>
      </stub_declaration>
    </Function>
    <Function id="_ZN4Bank10getAccountEiSs" name="EBankZKgetAccountFXiCDstdTMbasic_stringcCDstdTLchar_traitscZZCDstdTJallocatorcZZZZZ" decorated_name="Account * Bank::getAccount(int, std::string)" sorted_name="Bank::getAccount" needed="true">
      <stub_declaration complete="true">
         <declaration_prefix>::Account * (::Bank::</declaration_prefix>
         <declaration_suffix>_Stub_getAccount) (int num, ::std::string password) </declaration_suffix>
         <trigger_name>Bank::getAccount</trigger_name>
         <trigger_call>CPPTEST_ACTUAL_CALL(&quot;Bank::getAccount&quot;)-&gt;WithPtrArg(&quot;this&quot;, this, tgr_void_type())-&gt;WithRefArg(&quot;num&quot;, &amp;num, tgr_int_type())-&gt;WithPtrArg(&quot;password&quot;, &amp;password, tgr_void_type())-&gt;WithRefArg(&quot;__return&quot;, &amp;__return, tgr_ptr_type(tgr_void_type()))-&gt;WithRefArg(&quot;__callOrig&quot;, &amp;__callOrig, tgr_int_type())-&gt;End()</trigger_call>
         <post_trigger_call>CPPTEST_ACTUAL_AFTER_CALL(&quot;Bank::getAccount&quot;)-&gt;WithPtrArg(&quot;this&quot;, this, tgr_void_type())-&gt;WithRefArg(&quot;num&quot;, &amp;num, tgr_int_type())-&gt;WithPtrArg(&quot;password&quot;, &amp;password, tgr_void_type())-&gt;WithRefArg(&quot;__return&quot;, &amp;__return, tgr_ptr_type(tgr_void_type()))-&gt;End()</post_trigger_call>
         <orig_call>getAccount(num, password)</orig_call>
         <return_var_decl>::Account * __return</return_var_decl>
         <return_expression>0</return_expression>
         <user_decl_header>Bank.hxx</user_decl_header>
      </stub_declaration>
    </Function>
    <Function id="_ZN4Bank10addAccountEv" name="EBankZKaddAccountFXvZ" decorated_name="Account * Bank::addAccount(void)" sorted_name="Bank::addAccount" needed="true">
      <stub_declaration complete="true">
         <declaration_prefix>::Account * (::Bank::</declaration_prefix>
         <declaration_suffix>_Stub_addAccount) (void) </declaration_suffix>
         <trigger_name>Bank::addAccount</trigger_name>
         <trigger_call>CPPTEST_ACTUAL_CALL(&quot;Bank::addAccount&quot;)-&gt;WithPtrArg(&quot;this&quot;, this, tgr_void_type())-&gt;WithRefArg(&quot;__return&quot;, &amp;__return, tgr_ptr_type(tgr_void_type()))-&gt;WithRefArg(&quot;__callOrig&quot;, &amp;__callOrig, tgr_int_type())-&gt;End()</trigger_call>
         <post_trigger_call>CPPTEST_ACTUAL_AFTER_CALL(&quot;Bank::addAccount&quot;)-&gt;WithPtrArg(&quot;this&quot;, this, tgr_void_type())-&gt;WithRefArg(&quot;__return&quot;, &amp;__return, tgr_ptr_type(tgr_void_type()))-&gt;End()</post_trigger_call>
         <orig_call>addAccount()</orig_call>
         <return_var_decl>::Account * __return</return_var_decl>
         <return_expression>0</return_expression>
         <user_decl_header>Bank.hxx</user_decl_header>
      </stub_declaration>
    </Function>
    <Function id="_Znwj" name="Z2aFXjZ" decorated_name="void * operator new(std::size_t)" sorted_name="operator new" needed="true">
      <stub_declaration complete="true">
         <declaration_prefix>void * </declaration_prefix>
         <declaration_suffix>_Stub_operator_new (::std::size_t _MT_var2)  throw(::std::bad_alloc)</declaration_suffix>
         <orig_declaration>void * operator new (::std::size_t _MT_var4)  throw(::std::bad_alloc)</orig_declaration>
         <trigger_name>operator new</trigger_name>
         <trigger_call>CPPTEST_ACTUAL_CALL(&quot;operator new&quot;)-&gt;WithRefArg(&quot;_MT_var2&quot;, &amp;_MT_var2, tgr_uint_type())-&gt;WithRefArg(&quot;__return&quot;, &amp;__return, tgr_ptr_type(tgr_void_type()))-&gt;WithRefArg(&quot;__callOrig&quot;, &amp;__callOrig, tgr_int_type())-&gt;End()</trigger_call>
         <post_trigger_call>CPPTEST_ACTUAL_AFTER_CALL(&quot;operator new&quot;)-&gt;WithRefArg(&quot;_MT_var2&quot;, &amp;_MT_var2, tgr_uint_type())-&gt;WithRefArg(&quot;__return&quot;, &amp;__return, tgr_ptr_type(tgr_void_type()))-&gt;End()</post_trigger_call>
         <orig_call>operator new(_MT_var2)</orig_call>
         <return_var_decl>void * __return</return_var_decl>
         <return_expression>0</return_expression>
         <system_decl_header>new</system_decl_header>
      </stub_declaration>
    </Function>
    <Function id="_ZdlPv" name="Z2bFXPvZ" decorated_name="void operator delete(void *)" sorted_name="operator delete" needed="true">
      <stub_declaration complete="true">
         <declaration_prefix>void </declaration_prefix>
         <declaration_suffix>_Stub_operator_delete (void * _MT_var3)  throw()</declaration_suffix>
         <orig_declaration>void operator delete (void * _MT_var5)  throw()</orig_declaration>
         <trigger_name>operator delete</trigger_name>
         <trigger_call>CPPTEST_ACTUAL_CALL(&quot;operator delete&quot;)-&gt;WithRefArg(&quot;_MT_var3&quot;, &amp;_MT_var3, tgr_ptr_type(tgr_void_type()))-&gt;WithRefArg(&quot;__callOrig&quot;, &amp;__callOrig, tgr_int_type())-&gt;End()</trigger_call>
         <post_trigger_call>CPPTEST_ACTUAL_AFTER_CALL(&quot;operator delete&quot;)-&gt;WithRefArg(&quot;_MT_var3&quot;, &amp;_MT_var3, tgr_ptr_type(tgr_void_type()))-&gt;End()</post_trigger_call>
         <orig_call>operator delete(_MT_var3)</orig_call>
      </stub_declaration>
    </Function>
    <Function id="BankTestCase_testSuiteBegin" name="ZbLBankTestCase_testSuiteBeginX" decorated_name="void BankTestCase_testSuiteBegin(void)" sorted_name="BankTestCase_testSuiteBegin">
      <definition type="orig" source="code" file_id="1" line="5" col="71"/>
    </Function>
    <Function id="BankTestCase_callTest" name="ZbFBankTestCase_callTestX" decorated_name="int BankTestCase_callTest(const char *)" sorted_name="BankTestCase_callTest">
      <definition type="orig" source="code" file_id="1" line="5" col="156"/>
    </Function>
    <Variable name="DstdTMbasic_stringcCDstdTLchar_traitscZZCDstdTJallocatorcZZZE_RepZbE_S_empty_rep_storageX" id="_ZNSs4_Rep20_S_empty_rep_storageE" decorated_name="std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt;&gt;::size_type  (::std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt;&gt;::_Rep::_S_empty_rep_storage)[]" sorted_name="::std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt;&gt;::_Rep::_S_empty_rep_storage[]">
      <definition type="orig" source="template"/>
    </Variable>
</Symbols>

