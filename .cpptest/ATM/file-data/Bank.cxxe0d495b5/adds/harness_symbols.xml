<?xml version="1.0" encoding="UTF-8"?>
<Symbols version="2.0">
    <TranslationUnitId>1975445003_10748_4014160572</TranslationUnitId>
    <HasCoverageInfo>true</HasCoverageInfo>
    <File name="C:\Parasoft_Tutorial\workspace_tutorial_tantai\ATM\Bank.cxx" id="2"/>
    <File name="C:\Parasoft_Tutorial\workspace_tutorial_tantai\ATM\include\Account.hxx" id="1"/>
    <Function id="_ZN7AccountC9Ev" name="HAccountZ0FXvZ" decorated_name="Account::Account(void)" sorted_name="Account::Account" stub_used="true">
      <stub_declaration complete="true">
         <declaration_prefix> ::Account::Account (::</declaration_prefix>
         <declaration_suffix>_Dummy __CPTR_stub_ctor_param) </declaration_suffix>
         <ctor_initializer>: myAccountNumber(0), myBalance(0.0)</ctor_initializer>
         <trigger_name>Account::Account</trigger_name>
         <trigger_call>CPPTEST_ACTUAL_CALL(&quot;Account::Account&quot;)-&gt;WithPtrArg(&quot;this&quot;, this, tgr_void_type())-&gt;End()</trigger_call>
         <post_trigger_call>CPPTEST_ACTUAL_AFTER_CALL(&quot;Account::Account&quot;)-&gt;WithPtrArg(&quot;this&quot;, this, tgr_void_type())-&gt;End()</post_trigger_call>
         <user_decl_header>Account.hxx</user_decl_header>
      </stub_declaration>
      <definition type="orig" source="code" file_id="1" line="11" col="9"/>
    </Function>
    <Function id="_ZN7Account16setAccountNumberEi" name="HAccountZbAsetAccountNumberFXiZ" decorated_name="void Account::setAccountNumber(int)" sorted_name="Account::setAccountNumber" stub_used="true">
      <stub_declaration complete="true">
         <declaration_prefix>void (::Account::</declaration_prefix>
         <declaration_suffix>_Stub_setAccountNumber) (int num) </declaration_suffix>
         <trigger_name>Account::setAccountNumber</trigger_name>
         <trigger_call>CPPTEST_ACTUAL_CALL(&quot;Account::setAccountNumber&quot;)-&gt;WithPtrArg(&quot;this&quot;, this, tgr_void_type())-&gt;WithRefArg(&quot;num&quot;, &amp;num, tgr_int_type())-&gt;WithRefArg(&quot;__callOrig&quot;, &amp;__callOrig, tgr_int_type())-&gt;End()</trigger_call>
         <post_trigger_call>CPPTEST_ACTUAL_AFTER_CALL(&quot;Account::setAccountNumber&quot;)-&gt;WithPtrArg(&quot;this&quot;, this, tgr_void_type())-&gt;WithRefArg(&quot;num&quot;, &amp;num, tgr_int_type())-&gt;End()</post_trigger_call>
         <orig_call>setAccountNumber(num)</orig_call>
         <user_decl_header>Account.hxx</user_decl_header>
      </stub_declaration>
      <definition type="orig" source="code" file_id="1" line="31" col="14"/>
    </Function>
    <Function id="_ZN7Account11getPasswordEv" name="HAccountZLgetPasswordFXvZ" decorated_name="const char * Account::getPassword(void)" sorted_name="Account::getPassword" stub_used="true">
      <stub_declaration complete="true">
         <declaration_prefix>const char * (::Account::</declaration_prefix>
         <declaration_suffix>_Stub_getPassword) (void) </declaration_suffix>
         <trigger_name>Account::getPassword</trigger_name>
         <trigger_call>CPPTEST_ACTUAL_CALL(&quot;Account::getPassword&quot;)-&gt;WithPtrArg(&quot;this&quot;, this, tgr_void_type())-&gt;WithRefArg(&quot;__return&quot;, &amp;__return, tgr_ptr_type(tgr_char_type()))-&gt;WithRefArg(&quot;__callOrig&quot;, &amp;__callOrig, tgr_int_type())-&gt;End()</trigger_call>
         <post_trigger_call>CPPTEST_ACTUAL_AFTER_CALL(&quot;Account::getPassword&quot;)-&gt;WithPtrArg(&quot;this&quot;, this, tgr_void_type())-&gt;WithRefArg(&quot;__return&quot;, &amp;__return, tgr_ptr_type(tgr_char_type()))-&gt;End()</post_trigger_call>
         <orig_call>getPassword()</orig_call>
         <return_var_decl>const char * __return</return_var_decl>
         <return_expression>0</return_expression>
         <user_decl_header>Account.hxx</user_decl_header>
      </stub_declaration>
      <definition type="orig" source="code" file_id="1" line="39" col="21"/>
    </Function>
    <Function id="_ZSt17__throw_bad_allocv" name="DstdZbB__throw_bad_allocFXvZ" decorated_name="void std::__throw_bad_alloc(void)" sorted_name="std::__throw_bad_alloc" needed="true">
      <stub_declaration complete="true">
         <declaration_prefix>void </declaration_prefix>
         <declaration_suffix>_Stub___throw_bad_alloc (void) </declaration_suffix>
         <orig_declaration>void __throw_bad_alloc () </orig_declaration>
         <trigger_name>std::__throw_bad_alloc</trigger_name>
         <trigger_call>CPPTEST_ACTUAL_CALL(&quot;std::__throw_bad_alloc&quot;)-&gt;WithRefArg(&quot;__callOrig&quot;, &amp;__callOrig, tgr_int_type())-&gt;End()</trigger_call>
         <post_trigger_call>CPPTEST_ACTUAL_AFTER_CALL(&quot;std::__throw_bad_alloc&quot;)-&gt;End()</post_trigger_call>
         <orig_call>__throw_bad_alloc()</orig_call>
         <namespace type="vector">
           <value>std</value>
         </namespace>
      </stub_declaration>
    </Function>
    <Function id="_ZSt20__throw_length_errorPKc" name="DstdZbE__throw_length_errorFXPKcZ" decorated_name="void std::__throw_length_error(const char *)" sorted_name="std::__throw_length_error" needed="true">
      <stub_declaration complete="true">
         <declaration_prefix>void </declaration_prefix>
         <declaration_suffix>_Stub___throw_length_error (const char * _MT_var16) </declaration_suffix>
         <orig_declaration>void __throw_length_error (const char * _MT_var17) </orig_declaration>
         <trigger_name>std::__throw_length_error</trigger_name>
         <trigger_call>CPPTEST_ACTUAL_CALL(&quot;std::__throw_length_error&quot;)-&gt;WithRefArg(&quot;_MT_var16&quot;, &amp;_MT_var16, tgr_ptr_type(tgr_char_type()))-&gt;WithRefArg(&quot;__callOrig&quot;, &amp;__callOrig, tgr_int_type())-&gt;End()</trigger_call>
         <post_trigger_call>CPPTEST_ACTUAL_AFTER_CALL(&quot;std::__throw_length_error&quot;)-&gt;WithRefArg(&quot;_MT_var16&quot;, &amp;_MT_var16, tgr_ptr_type(tgr_char_type()))-&gt;End()</post_trigger_call>
         <orig_call>__throw_length_error(_MT_var16)</orig_call>
         <namespace type="vector">
           <value>std</value>
         </namespace>
      </stub_declaration>
    </Function>
    <Function id="_ZN4BankC9Ev" name="EBankZ0FXvZ" decorated_name="Bank::Bank(void)" sorted_name="Bank::Bank">
      <definition type="orig" source="code" file_id="2" line="4" col="7"/>
    </Function>
    <Function id="_ZN4BankD9Ev" name="EBankZ1FXvZ" decorated_name="Bank::~Bank(void)" sorted_name="Bank::~Bank">
      <definition type="orig" source="code" file_id="2" line="9" col="7"/>
    </Function>
    <Function id="_ZN4Bank10getAccountEiSs" name="EBankZKgetAccountFXiCDstdTMbasic_stringcCDstdTLchar_traitscZZCDstdTJallocatorcZZZZZ" decorated_name="Account * Bank::getAccount(int, std::string)" sorted_name="Bank::getAccount">
      <definition type="orig" source="code" file_id="2" line="15" col="16"/>
    </Function>
    <Function id="_ZN4Bank10addAccountEv" name="EBankZKaddAccountFXvZ" decorated_name="Account * Bank::addAccount(void)" sorted_name="Bank::addAccount">
      <definition type="orig" source="code" file_id="2" line="33" col="16"/>
    </Function>
    <Function id="_Znwj" name="Z2aFXjZ" decorated_name="void * operator new(std::size_t)" sorted_name="operator new" stub_used="true" needed="true">
      <stub_declaration complete="true">
         <declaration_prefix>void * </declaration_prefix>
         <declaration_suffix>_Stub_operator_new (::std::size_t _MT_var3) </declaration_suffix>
         <orig_declaration>void * operator new (::std::size_t _MT_var18)  throw(::std::bad_alloc)</orig_declaration>
         <trigger_name>operator new</trigger_name>
         <trigger_call>CPPTEST_ACTUAL_CALL(&quot;operator new&quot;)-&gt;WithRefArg(&quot;_MT_var3&quot;, &amp;_MT_var3, tgr_uint_type())-&gt;WithRefArg(&quot;__return&quot;, &amp;__return, tgr_ptr_type(tgr_void_type()))-&gt;WithRefArg(&quot;__callOrig&quot;, &amp;__callOrig, tgr_int_type())-&gt;End()</trigger_call>
         <post_trigger_call>CPPTEST_ACTUAL_AFTER_CALL(&quot;operator new&quot;)-&gt;WithRefArg(&quot;_MT_var3&quot;, &amp;_MT_var3, tgr_uint_type())-&gt;WithRefArg(&quot;__return&quot;, &amp;__return, tgr_ptr_type(tgr_void_type()))-&gt;End()</post_trigger_call>
         <orig_call>operator new(_MT_var3)</orig_call>
         <return_var_decl>void * __return</return_var_decl>
         <return_expression>0</return_expression>
         <system_decl_header>new</system_decl_header>
      </stub_declaration>
    </Function>
    <Function id="_ZdlPv" name="Z2bFXPvZ" decorated_name="void operator delete(void *)" sorted_name="operator delete" stub_used="true" needed="true">
      <stub_declaration complete="true">
         <declaration_prefix>void </declaration_prefix>
         <declaration_suffix>_Stub_operator_delete (void * _MT_var9)  throw()</declaration_suffix>
         <orig_declaration>void operator delete (void * _MT_var19)  throw()</orig_declaration>
         <trigger_name>operator delete</trigger_name>
         <trigger_call>CPPTEST_ACTUAL_CALL(&quot;operator delete&quot;)-&gt;WithRefArg(&quot;_MT_var9&quot;, &amp;_MT_var9, tgr_ptr_type(tgr_void_type()))-&gt;WithRefArg(&quot;__callOrig&quot;, &amp;__callOrig, tgr_int_type())-&gt;End()</trigger_call>
         <post_trigger_call>CPPTEST_ACTUAL_AFTER_CALL(&quot;operator delete&quot;)-&gt;WithRefArg(&quot;_MT_var9&quot;, &amp;_MT_var9, tgr_ptr_type(tgr_void_type()))-&gt;End()</post_trigger_call>
         <orig_call>operator delete(_MT_var9)</orig_call>
      </stub_declaration>
    </Function>
    <Variable name="DstdTMbasic_stringcCDstdTLchar_traitscZZCDstdTJallocatorcZZZE_RepZbE_S_empty_rep_storageX" id="_ZNSs4_Rep20_S_empty_rep_storageE" decorated_name="std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt;&gt;::size_type  (::std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt;&gt;::_Rep::_S_empty_rep_storage)[]" sorted_name="::std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt;&gt;::_Rep::_S_empty_rep_storage[]">
      <definition type="orig" source="template"/>
    </Variable>
</Symbols>

