$
#<Template name="Adapted string type post-condition check">
#    <Properties>
#        <Property key="FLATTEN_IN_WIZARD" />
#    </Properties> 
#    <Inputs>
#        <Input name="USE_DATA_SOURCES" type="string">
#            <Source location="builtin://com.parasoft.xtest.testgen.api.cpp.UseDataSourcesProvider">
#            </Source>
#            <Properties>
#                <Property key="HIDE_IN_WIZARD"/>
#            </Properties>
#        </Input>
#        <Input name="USE_WIZARD_ASSERTIONS" type="string">
#            <Source location="builtin://com.parasoft.xtest.testgen.api.cpp.UseWizardAssertionsProvider">
#            </Source>
#            <Properties>
#                <Property key="HIDE_IN_WIZARD"/>
#            </Properties>
#        </Input>
#        <Input name="MAX_STRING_POST_CONDITION_SIZE" type="string">
#            <Source location="builtin://com.parasoft.xtest.testgen.api.cpp.MaxStringPostConditionSizeProvider">
#            </Source>
#            <Properties>
#                <Property key="HIDE_IN_WIZARD"/>
#            </Properties>
#        </Input>
#        <Input name="DATA_SOURCE" type="string">
#            <Source location="builtin://com.parasoft.xtest.testgen.api.cpp.DataSourceColumnCollector">
#                <Argument name="VAR_NAME" value="assert $VAR_NAME$"/>
#                <Argument name="VAR_VALUE" value="&quot;&quot;"/>
#            </Source>
#            <Properties>
#                <Property key="DISABLE_IN_WIZARD"/>
#                <Property key="USE_DATA_SOURCES"/>
#                <Property key="GENERATE_POST_ASSERTIONS"/>
#            </Properties>
#         </Input>
#        <Input name="EXPECTED_VALUE" type="string" >
#            <Source location="tja://builtin/str/value" />
#            <Source location="builtin://com.parasoft.xtest.testgen.api.cpp.generator.tja.ItemChooserProvider">
#				 <Argument name="VALUE" value="ACTUAL" />
#				 <Argument name="PROP_PREFFERED" value="" />
#            </Source>
#            <Properties>
#                <Property key="DISABLE_IN_AUTOGEN"/>
#                <Property key="FLATTENED_GROUP"/>
#            </Properties>
#        </Input>
#        <Input name="GENERATE_XML" type="string">
#            <Source location="builtin://com.parasoft.xtest.testgen.api.cpp.GenerateXmlProvider">
#            </Source>
#            <Properties>
#                <Property key="HIDE_IN_WIZARD"/>
#            </Properties>
#        </Input>
#    </Inputs>
#</Template>
\$
$if GENERATE_XML == "TRUE":\$
$if KIND == "POST_COND":\$
$  if TYPENAME != "":\$
<step id="CodeStep"><code><![CDATA[$INDENT$CPPTEST_POST_CONDITION_CSTR_N("$MSG_PREFIX$$TYPENAME$ $VAR_NAME$", ( $VAR_NAME$.c_str() ), $MAX_STRING_POST_CONDITION_SIZE$);]]></code></step>
$  else:\$
<step id="CodeStep"><code><![CDATA[$INDENT$CPPTEST_POST_CONDITION_CSTR_N("$MSG_PREFIX$::std::basic_string< char, ::std::char_traits< char> , ::std::allocator< char> >  $VAR_NAME$", ( $VAR_NAME$.c_str() ), $MAX_STRING_POST_CONDITION_SIZE$);]]></code></step>
$  end\$
$elif KIND == "PREPOST_REPORT":\$
$  if TYPENAME != "":\$
<step id="CodeStep"><code><![CDATA[$INDENT$CPPTEST_REPORT_CSTR_N("$MSG_PREFIX$$TYPENAME$ $VAR_NAME$", ( $VAR_NAME$.c_str() ), $MAX_STRING_POST_CONDITION_SIZE$);]]></code></step>
$  else:\$
<step id="CodeStep"><code><![CDATA[$INDENT$CPPTEST_REPORT_CSTR_N("$MSG_PREFIX$::std::basic_string< char, ::std::char_traits< char> , ::std::allocator< char> >  $VAR_NAME$", ( $VAR_NAME$.c_str() ), $MAX_STRING_POST_CONDITION_SIZE$);]]></code></step>
$  end\$
$elif KIND == "POST_ASSERT":\$
$  if USE_DATA_SOURCES == "TRUE":\$
<step id="AssertionStep"><type>CPPTEST_ASSERT_CSTR_N_EQUAL</type><P1>CPPTEST_DS_GET_CSTR("assert $VAR_NAME$")</P1><P2>$VAR_NAME$.c_str()</P2><P3>$MAX_STRING_POST_CONDITION_SIZE$</P3></step>
$  elif USE_WIZARD_ASSERTIONS == "TRUE":\$
$    if EXPECTED_VALUE == "ACTUAL":\$
$      if TYPENAME != "":\$
<step id="CodeStep"><code><![CDATA[$INDENT$CPPTEST_POST_CONDITION_CSTR_N("$MSG_PREFIX$$TYPENAME$ $VAR_NAME$", ( $VAR_NAME$.c_str() ), $MAX_STRING_POST_CONDITION_SIZE$);]]></code></step>
$      else:\$
<step id="CodeStep"><code><![CDATA[$INDENT$CPPTEST_POST_CONDITION_CSTR_N("$MSG_PREFIX$::std::basic_string< char, ::std::char_traits< char> , ::std::allocator< char> >  $VAR_NAME$", ( $VAR_NAME$.c_str() ), $MAX_STRING_POST_CONDITION_SIZE$);]]></code></step>
$      end\$
$    else:\$
<step id="AssertionStep"><type>CPPTEST_ASSERT_CSTR_N_EQUAL</type><P1>$EXPECTED_VALUE$</P1><P2>$VAR_NAME$.c_str()</P2><P3>$MAX_STRING_POST_CONDITION_SIZE$</P3></step>
$    end\$
$  else:\$
<step id="AssertionStep"><type>CPPTEST_ASSERT_CSTR_N_EQUAL</type><P1>""</P1><P2>$VAR_NAME$.c_str()</P2><P3>$MAX_STRING_POST_CONDITION_SIZE$</P3></step>
$  end\$
$end\$
$else:\$
$if KIND == "POST_COND":\$
$  if TYPENAME != "":\$
$INDENT$CPPTEST_POST_CONDITION_CSTR_N("$MSG_PREFIX$$TYPENAME$ $VAR_NAME$", ( $VAR_NAME$.c_str() ), $MAX_STRING_POST_CONDITION_SIZE$);
$  else:\$
$INDENT$CPPTEST_POST_CONDITION_CSTR_N("$MSG_PREFIX$::std::basic_string< char, ::std::char_traits< char> , ::std::allocator< char> >  $VAR_NAME$", ( $VAR_NAME$.c_str() ), $MAX_STRING_POST_CONDITION_SIZE$);
$  end\$
$elif KIND == "PREPOST_REPORT":\$
$  if TYPENAME != "":\$
$INDENT$CPPTEST_REPORT_CSTR_N("$MSG_PREFIX$$TYPENAME$ $VAR_NAME$", ( $VAR_NAME$.c_str() ), $MAX_STRING_POST_CONDITION_SIZE$);
$  else:\$
$INDENT$CPPTEST_REPORT_CSTR_N("$MSG_PREFIX$::std::basic_string< char, ::std::char_traits< char> , ::std::allocator< char> >  $VAR_NAME$", ( $VAR_NAME$.c_str() ), $MAX_STRING_POST_CONDITION_SIZE$);
$  end\$
$elif KIND == "POST_ASSERT":\$
$  if USE_DATA_SOURCES == "TRUE":\$
$INDENT$CPPTEST_ASSERT_CSTR_N_EQUAL(CPPTEST_DS_GET_CSTR("assert $VAR_NAME$"), ( $VAR_NAME$.c_str() ), $MAX_STRING_POST_CONDITION_SIZE$ );
$  elif USE_WIZARD_ASSERTIONS == "TRUE":\$
$    if EXPECTED_VALUE == "ACTUAL":\$
$      if TYPENAME != "":\$
$INDENT$CPPTEST_POST_CONDITION_CSTR_N("$MSG_PREFIX$$TYPENAME$ $VAR_NAME$", ( $VAR_NAME$.c_str() ), $MAX_STRING_POST_CONDITION_SIZE$);
$      else:\$
$INDENT$CPPTEST_POST_CONDITION_CSTR_N("$MSG_PREFIX$::std::basic_string< char, ::std::char_traits< char> , ::std::allocator< char> >  $VAR_NAME$", ( $VAR_NAME$.c_str() ), $MAX_STRING_POST_CONDITION_SIZE$);
$      end\$
$    else:\$
$INDENT$CPPTEST_ASSERT_CSTR_N_EQUAL($EXPECTED_VALUE$, ( $VAR_NAME$.c_str() ), $MAX_STRING_POST_CONDITION_SIZE$ );
$    end\$
$  else:\$
$INDENT$/* CPPTEST_ASSERT_CSTR_N_EQUAL("", ( $VAR_NAME$.c_str() ), $MAX_STRING_POST_CONDITION_SIZE$); */
$  end\$
$end\$
$end\$
